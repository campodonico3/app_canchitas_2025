ðŸ’¾ DATA - La Capa de ImplementaciÃ³n
Â¿QuÃ© es el Data?
El Data es la capa que implementa CÃ“MO se obtienen, guardan y manipulan los datos. Contiene toda la lÃ³gica tÃ©cnica de comunicaciÃ³n con servicios externos.
MetÃ¡fora: Si tu app fuera un restaurante:
 - Presentation = Meseros (toman pedidos y sirven)
 - Domain = Recetas y menÃº (quÃ© se puede cocinar)
 - Data = Cocina y proveedores (cÃ³mo se prepara, de dÃ³nde vienen ingredientes)

 ðŸ“‚ Estructura del Data
     data/
     â”œâ”€â”€ models/           â†’ DTOs (Data Transfer Objects)
     â”œâ”€â”€ repositories/     â†’ ImplementaciÃ³n de contratos del Domain
     â””â”€â”€ sources/          â†’ Fuentes de datos (API, DB local, cachÃ©)
         â”œâ”€â”€ remote/       â†’ APIs, servicios web
         â””â”€â”€ local/        â†’ SQLite, SharedPreferences, Hive

âœ… Checklist de la Capa DATA (ContinuaciÃ³n)

    Models (DTOs):
    - âœ… fromJson() para parsear API
    - âœ… toJson() para enviar a API
    - âœ… toEntity() para convertir a Domain
    - âœ… fromEntity() para crear desde Domain
    - âœ… Manejo de null safety
    - âœ… Valores por defecto para campos opcionales
    - âœ… ValidaciÃ³n de tipos en parseo

    Sources (Remote):
    - âœ… Manejo de DioException
    - âœ… ExtracciÃ³n de mensajes de error
    - âœ… Logs descriptivos
    - âœ… Retornar Either<Error, Success>
    - âœ… Timeouts configurados
    - âœ… Retry logic (opcional)

    Sources (Local):
    - âœ… Operaciones CRUD completas
    - âœ… Manejo de cachÃ© con timestamps
    - âœ… Limpieza de cachÃ© antigua
    - âœ… SerializaciÃ³n/DeserializaciÃ³n
    - âœ… Manejo de errores de I/O

    Repositories:
    - âœ… Implementan contratos del Domain
    - âœ… Coordinan mÃºltiples sources
    - âœ… Estrategia de cachÃ© definida
    - âœ… ConversiÃ³n DTO â†” Entity
    - âœ… Manejo robusto de errores
    - âœ… Logs detallados del flujo
    - âœ… SincronizaciÃ³n offline (si aplica)