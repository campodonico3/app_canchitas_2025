1Ô∏è‚É£ MODELS (DTOs - Data Transfer Objects)
¬øQu√© son?
Objetos que transfieren datos entre capas. Son la representaci√≥n t√©cnica de c√≥mo vienen/van los datos desde APIs o bases de datos.
Caracter√≠sticas:
 - ‚úÖ Conocen el formato de la API (JSON, XML)
 - ‚úÖ M√©todos toJson() y fromJson()
 - ‚úÖ Pueden tener nombres t√©cnicos (snake_case de APIs)
 - ‚úÖ Se convierten a/desde Entities

Ejemplo B√°sico:

// data/models/user_model.dart
class UserModel {
  final String userId;        // Como viene de la API
  final String emailAddress;
  final String fullName;
  final int createdTimestamp;

  UserModel({
    required this.userId,
    required this.emailAddress,
    required this.fullName,
    required this.createdTimestamp,
  });

  // ‚úÖ Desde JSON (API ‚Üí App)
  factory UserModel.fromJson(Map<String, dynamic> json) {
    return UserModel(
      userId: json['user_id'] ?? '',
      emailAddress: json['email_address'] ?? '',
      fullName: json['full_name'] ?? '',
      createdTimestamp: json['created_at'] ?? 0,
    );
  }

  // ‚úÖ Hacia JSON (App ‚Üí API)
  Map<String, dynamic> toJson() {
    return {
      'user_id': userId,
      'email_address': emailAddress,
      'full_name': fullName,
      'created_at': createdTimestamp,
    };
  }

  // ‚úÖ Convertir a Entity (Domain)
  User toEntity() {
    return User(
      id: userId,
      email: emailAddress,
      name: fullName,
      createdAt: DateTime.fromMillisecondsSinceEpoch(createdTimestamp * 1000),
    );
  }

  // ‚úÖ Crear desde Entity
  factory UserModel.fromEntity(User user) {
    return UserModel(
      userId: user.id,
      emailAddress: user.email,
      fullName: user.name,
      createdTimestamp: user.createdAt.millisecondsSinceEpoch ~/ 1000,
    );
  }
}

DTO vs Entity - La Diferencia:

// ‚ùå API Response (como viene del servidor)
{
  "user_id": "123",
  "email_address": "user@example.com",
  "full_name": "Juan P√©rez",
  "created_at": 1640000000,
  "is_premium_user": true
}

// üíæ DATA - UserModel (DTO)
class UserModel {
  final String userId;           // Snake case
  final String emailAddress;
  final String fullName;
  final int createdTimestamp;    // Timestamp num√©rico
  final bool isPremiumUser;
}

// üß† DOMAIN - User (Entity)
class User {
  final String id;               // Camel case
  final String email;
  final String name;
  final DateTime createdAt;      // DateTime tipado
  final bool isPremium;

  // + L√≥gica de negocio
  bool get canAccessFeature => isPremium && /* l√≥gica */;
}